{
    "atomType": "Molecule",
    "name": "To the Right",
    "x": 0,
    "y": 0,
    "uniqueID": "a0890f38-74c5-4820-9da4-f849226726ef",
    "ioValues": [
        {
            "name": "A",
            "ioValue": 10,
            "currentEquation": null
        },
        {
            "name": "B",
            "ioValue": 10,
            "currentEquation": null
        }
    ],
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": "b27f5469-e787-466b-81a0-560bf24d1dcc",
            "ioValues": []
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.5748898678414097,
            "y": 0.43732590529247906,
            "uniqueID": "30476c49-8d4f-40cd-a326-6afb13fe13ec",
            "ioValues": [
                {
                    "name": "A",
                    "ioValue": 10,
                    "currentEquation": null
                },
                {
                    "name": "B",
                    "ioValue": 10,
                    "currentEquation": null
                }
            ],
            "codeVersion": 1,
            "code": "\n      Inputs = [\n       {inputName: \"A\", type: \"geometry\", defaultValue: null},\n        {inputName: \"B\", type: \"geometry\", defaultValue: null}\n      ]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n\n      //Takes the address and gets the shape from the library\n      let importedShapeA = library[A]\n\n      let boundsA = await GetBounds(A);\n      let A_minX = boundsA.min[0];\n\n      let B_maxX = 0;\n      if(B){\n          let boundsB = await GetBounds(B);\n          console.log(\"Bounding Box B:  \");\n          console.log(boundsB);\n          B_maxX  = boundsB.max[0];\n      }\n\n     let translationX = B_maxX - A_minX;\n     \n      let movedOutput = await Move(A, translationX, 0, 0);\n\n      return movedOutput;\n\n      // //We can also create a new shape from scratch\n      // let createdRectangle = replicad.drawRectangle(5,7)\n      // //This is the plane we are going to put our new shape on\n      // const newPlane = new replicad.Plane().pivot(0, 'Y');\n      // //And we extrude the shape to make it 3D\n      // let createdShape = createdRectangle.sketchOnPlane(newPlane).extrude(height)\n\n      // //For our new geometry we need to define the tags, color, plane, etc\n      // let shape2 = {\n      //     geometry: [createdShape],\n      //     tags: [\"aTag\"],\n      //     color: '#A3CE5B',\n      //     plane: newPlane,\n      //     bom: []\n      // }\n\n      // //Then we can return our created shape in just the same way\n      // //return shape2\n\n      // //If we want to return both shapes at once, we can create an assembly with them\n      // let anAssembly = {\n      //   geometry: [shape1, shape2],\n      //   tags: [\"aNewTag\"],\n      //   color: '#A3CF5B',\n      //   plane: newPlane,\n      //   bom: []\n      // }\n\n      // //And we can return that in the same way\n      // return anAssembly\n\n      /**\n      To Use the Code Atom, enter your inputs to the input list as an object array:\n      Inputs = [\n        {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n        {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n      If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0]\n      Use any replicad available methods to modify your geometry. Learn more about all of the available methods at\n      https://replicad.xyz/docs/introapp/UserGuide.html\n      Return a replicad object that includes geometry, color, tags and plane.\n\n      Example Code Atom:\n        Inputs = [\n          {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n          {inputName: \"x\", type: \"number\", defaultValue: 5}\n        ]\n        let finalShape = library[shape].geometry[0].clone().translate([x,0,0])\n        return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n      */\n      "
        },
        {
            "atomType": "Input",
            "name": "A",
            "x": 0.029699999999999997,
            "y": 0.5292479108635098,
            "uniqueID": "1904179e-95de-4257-ad20-1a103af7a791",
            "ioValues": [],
            "type": "geometry"
        },
        {
            "atomType": "Input",
            "name": "B",
            "x": 0.029699999999999997,
            "y": 0.7743732590529249,
            "uniqueID": "de717280-078f-448c-88ac-5f5133dcab22",
            "ioValues": [],
            "type": "geometry"
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "output",
            "ap2Name": "number or geometry",
            "ap1ID": "30476c49-8d4f-40cd-a326-6afb13fe13ec",
            "ap2ID": "b27f5469-e787-466b-81a0-560bf24d1dcc"
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "A",
            "ap1ID": "1904179e-95de-4257-ad20-1a103af7a791",
            "ap2ID": "30476c49-8d4f-40cd-a326-6afb13fe13ec"
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "B",
            "ap1ID": "de717280-078f-448c-88ac-5f5133dcab22",
            "ap2ID": "30476c49-8d4f-40cd-a326-6afb13fe13ec"
        }
    ],
    "unitsKey": "MM",
    "fileTypeVersion": 1,
    "compiledBom": [],
    "filetypeVersion": 1
}